long long int count = 0;
    
    long long int merge(long long arr[],int l,int m,int r)  {
        long long temp[r - l + 1];
        
        int i,j,k;
        i = l;
        j = m+1;
        k = 0;
        
        while((i <= m) && (j <= r))   {
            if(arr[i] <= arr[j])    {
                temp[k++] = arr[i++];
            }
            else    {
                temp[k++] = arr[j++];
                
                count += m - i + 1;
            }
        }
        
        while(i <= m )   {
            temp[k++] = arr[i++];
        }
        while(j <= r)   {
            temp[k++] = arr[j++];
        }
        
        for(int i = l;i<=r;i++) {
            arr[i] = temp[i-l];
        }
        
    }
    
    long long int merge_sort(long long arr[],int left,int right)    {
        long long int inversion = 0;   
        int mid;
        
        if(left < right)   {
             mid = (left + right)/2;
            
             merge_sort(arr,left,mid);
             merge_sort(arr,mid+1,right);
             merge(arr,left,mid,right);
        }
    }
    
    long long int inversionCount(long long arr[], long long n)
    {
        merge_sort(arr,0,n-1);
        return count;
    }
    
    //Fenwick Tree
    
    
    vector<long long> tree;
    
    void update(int i)  {
        for(;i<=500000 ; i += (i &-i)){
            tree[i]++;
        }
    }
    
    long long sum(long long i)    {
        long long ans = 0;
        for(;i>0; i -= (i&-i)) {
            ans += tree[i];
        }
        return ans;
    }
    
    long long int inversionCount(long long arr[], long long n)
    {
        tree.resize(500001);
       vector<long long> v(arr,arr+n);
        sort(v.begin(),v.end());
        map<long long,long long> mp;
        long long x=1,zero=0,ans=0;
        for(long long i:v){
           if(!mp.count(i))
                mp[i]=x++;
        }
        for(long long i=0;i<n;i++)
           arr[i]=mp[arr[i]];
       for(long long i=n-1;i>=0;i--){
            if(arr[i]==0)
                zero++;
            else{
                ans+=zero+sum(arr[i]-1);
                update(arr[i]);
            }
        }
        return ans;
    }
